import os
import sys

import telebot
from requests import ReadTimeout
from telebot import types
from telebot.types import ReplyKeyboardRemove

from products import products_bag
from products import products_games
from products import products_baskets

import setting

bot = telebot.TeleBot(setting.token_prod)
# –ó–∞–∫–∞–∑
user_dict = {}
user_chats = 0


class User:

    def __init__(self, name):
        self.name = None
        self.type = None
        self.for_whom = None
        self.holiday = None
        self.kontakt_numb = None
        self.git_acc1 = None

        keys = ['name', 'type', 'for_whom', 'holiday', 'kontakt_numb', 'git_acc1']

        for key in keys:
            self.key = None


# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
products_bag = products_bag
current_index = 0  # –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏


@bot.message_handler(commands=['start'])
def start(message):
    try:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton('üéÅ –ó–∞–∫–∞–∑–∞—Ç—å –∏–∑–¥–µ–ª–∏–µ')
        btn3 = types.KeyboardButton('üåü –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã')
        btn4 = types.KeyboardButton('‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã')
        btn5 = types.KeyboardButton('üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª')
        markup.add(btn1, btn3, btn4, btn5)
        bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É –ø–æ –ø—Ä–æ–¥–∞–∂–µ –≤—è–∑–∞–Ω–Ω—ã—Ö –∏–≥—Ä—É—à–µ–∫ –∏ –∫–æ—Ä–∑–∏–Ω–æ–∫! "
                                               "–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –ª—é–±—É—é –≤—è–∑–∞–Ω–Ω—É—é –≤–µ—â—å –ø–æ –≤–∞—à–µ–º—É –∂–µ–ª–∞–Ω–∏—é.",
                         reply_markup=markup)
        bot.send_message(message.from_user.id,
                         "üí´ –ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –∏ –º—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –¥–ª—è –≤–∞—Å.")
        bot.send_message(message.from_user.id,
                         "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏. –ù–∞–¥–µ–µ–º—Å—è, –≤—ã –Ω–∞–π–¥–µ—Ç–µ —É –Ω–∞—Å —Ç–æ, —á—Ç–æ –∏—â–µ—Ç–µ! üß∂üß∏üß∫",
                         reply_markup=markup)
    except Exception as e:
        bot.reply_to(message, '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')


@bot.message_handler(func=lambda message: message.text == 'üåü –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã')
def handle_works_command(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üß∫ –ö–æ—Ä–∑–∏–Ω—ã –∏ –Ω–∞–±–æ—Ä—ã')
    btn3 = types.KeyboardButton('üß∏ –ò–≥—Ä—É—à–∫–∏')
    btn4 = types.KeyboardButton('üëõ –°—É–º–∫–∏')
    btn5 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1, btn3, btn4, btn5)
    bot.send_message(message.from_user.id, '‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª', reply_markup=markup)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –°—É–º–æ–∫
@bot.message_handler(func=lambda message: message.text == 'üëõ –°—É–º–∫–∏')
def handle_bags_command(message):
    global current_index
    current_index = 0  # –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    send_batch(message)


def send_batch(message):
    global current_index
    batch_size = 2  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
    end_index = current_index + batch_size

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π "–ø–æ—Ä—Ü–∏–∏"
    for product in products_bag[current_index:end_index]:
        with open(product['image_path'], 'rb') as photo:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ
            bot.send_photo(message.chat.id, photo, caption=f"<b>{product['name']}</b>\n\n{product['description']}",
                           parse_mode="HTML")
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π "–ø–æ—Ä—Ü–∏–∏"
    current_index = end_index

    # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"
    if current_index < len(products_bag):
        markup = telebot.types.InlineKeyboardMarkup()
        load_more_button = telebot.types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë ü§©', callback_data='load_more')
        markup.add(load_more_button)
        remaining_products = len(products_bag) - current_index
        if remaining_products == 1:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç–∞, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)
        elif remaining_products < 5:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç—ã, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'load_more')
def handle_load_more(call):
    send_batch(call.message)
    bot.answer_callback_query(call.id)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ò–≥—Ä—É—à–µ–∫
@bot.message_handler(func=lambda message: message.text == 'üß∏ –ò–≥—Ä—É—à–∫–∏')
def handle_games_command(message):
    global current_index
    current_index = 0  # –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    send_batch_games(message)


def send_batch_games(message):
    global current_index
    batch_size = 2  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
    end_index = current_index + batch_size

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π "–ø–æ—Ä—Ü–∏–∏"
    for product in products_games[current_index:end_index]:
        with open(product['image_path'], 'rb') as photo:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ
            bot.send_photo(message.chat.id, photo, caption=f"<b>{product['name']}</b>\n\n{product['description']}",
                           parse_mode="HTML")
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π "–ø–æ—Ä—Ü–∏–∏"
    current_index = end_index

    # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"
    if current_index < len(products_games):
        markup = telebot.types.InlineKeyboardMarkup()
        load_more_button = telebot.types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë ü§©', callback_data='load_more_games')
        markup.add(load_more_button)
        remaining_products = len(products_games) - current_index
        if remaining_products == 1:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç–∞, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)
        elif remaining_products < 5:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç—ã, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'load_more_games')
def handle_load_more(call):
    send_batch_games(call.message)
    bot.answer_callback_query(call.id)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ö–æ—Ä–∑–∏–Ω–æ–∫
@bot.message_handler(func=lambda message: message.text == 'üß∫ –ö–æ—Ä–∑–∏–Ω—ã –∏ –Ω–∞–±–æ—Ä—ã')
def handle_basket_command(message):
    bot.send_message(message.from_user.id,
                     '–°—Ç–∏–ª—å–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω–∫–∏ —Å–¥–µ–ª–∞—é—Ç –í–∞—à –¥–æ–º —É—é—Ç–Ω—ã–º –∏ –º–æ–¥–Ω—ã–º. –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞.\n')
    global current_index
    current_index = 0  # –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    send_batch_basket(message)


def send_batch_basket(message):
    global current_index
    batch_size = 2  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
    end_index = current_index + batch_size

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π "–ø–æ—Ä—Ü–∏–∏"
    for product in products_baskets[current_index:end_index]:
        with open(product['image_path'], 'rb') as photo:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ
            bot.send_photo(message.chat.id, photo, caption=f"<b>{product['name']}</b>\n\n{product['description']}",
                           parse_mode="HTML")
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π "–ø–æ—Ä—Ü–∏–∏"
    current_index = end_index

    # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"
    if current_index < len(products_baskets):
        markup = telebot.types.InlineKeyboardMarkup()
        load_more_button = telebot.types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë ü§©', callback_data='load_more_basket')
        markup.add(load_more_button)
        remaining_products = len(products_baskets) - current_index
        if remaining_products == 1:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç–∞, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)
        elif remaining_products < 5:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç—ã, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'load_more_basket')
def handle_load_more(call):
    send_batch_games(call.message)
    bot.answer_callback_query(call.id)


@bot.message_handler(func=lambda message: message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def handle_menu_command(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üéÅ –ó–∞–∫–∞–∑–∞—Ç—å –∏–∑–¥–µ–ª–∏–µ')
    btn3 = types.KeyboardButton('üåü –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã')
    btn4 = types.KeyboardButton('‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã')
    btn5 = types.KeyboardButton('üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª')
    markup.add(btn1, btn3, btn4, btn5)
    bot.send_message(message.from_user.id, '‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã')
def handle_contacts_command(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1)
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –≤ Telegram", url="https://t.me/@Lyudo4ek_1986")
    keyboard.add(button)
    bot.send_message(message.from_user.id, '–ù–∞–ø–∏—Å–∞—Ç—å –í–∫–æ–Ω—Ç–∞–∫—Ç–µ: \n' + setting.VK, disable_web_page_preview=True,
                     reply_markup=markup)
    bot.send_contact(message.from_user.id, '+79888904608', '–õ—é–¥–º–∏–ª–∞', '–ë–∞–π–≥—É–∑–∏–Ω–∞', reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == 'üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª')
def handle_subscribe_command(message):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/MagicCrochet_61")
    keyboard.add(button)
    bot.send_message(chat_id=message.chat.id, text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:",
                     reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == 'üéÅ –ó–∞–∫–∞–∑–∞—Ç—å –∏–∑–¥–µ–ª–∏–µ')
def handle_order_command(message):
    chat_id = message.chat.id
    board = types.InlineKeyboardMarkup()
    cancel = types.InlineKeyboardButton(text="üôÖ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="–û—Ç–º–µ–Ω–∞")
    board.add(cancel)
    msg = bot.send_message(chat_id, "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", reply_markup=board)
    bot.register_next_step_handler(msg, name_step)


def name_step(message, user=None):
    try:
        board = types.InlineKeyboardMarkup()
        cancel = types.InlineKeyboardButton(text="üôÖ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="–û—Ç–º–µ–Ω–∞")
        board.add(cancel)
        chat_id = message.chat.id
        name = message.text
        user = User(name)
        user_dict[chat_id] = user
        user.name = name
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üß∫ –ö–æ—Ä–∑–∏–Ω—ã –∏ –Ω–∞–±–æ—Ä—ã')
        btn3 = types.KeyboardButton('üß∏ –ò–≥—Ä—É—à–∫–∏')
        btn4 = types.KeyboardButton('üëõ –°—É–º–∫–∏')
        markup.add(btn1, btn3, btn4)
        msg = bot.send_message(chat_id, "–ö–∞–∫–æ–π –≤–∏–¥ –∏–∑–¥–µ–ª–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_type)
    except Exception as e:
        bot.reply_to(message, '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
    # keys = ['name', 'type', 'for_whom', 'holiday', 'kontakt_numb', 'git_acc1']


def process_type(message):
    try:
        board = types.InlineKeyboardMarkup()
        cancel = types.InlineKeyboardButton(text="üôÖ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="–û—Ç–º–µ–Ω–∞")
        board.add(cancel)
        chat_id = message.chat.id
        type = message.text
        user = user_dict[chat_id]
        user.type = type
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üîÑ–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥')
        markup.add(btn1)
        msg = bot.send_message(chat_id, '–î–ª—è –∫–æ–≥–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–∑–¥–µ–ª–∏–µ?', reply_markup=markup)
        bot.register_next_step_handler(msg, process_for_whom)
    except Exception as e:
        bot.reply_to(message, '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')


def process_for_whom(message):
    try:
        board = types.InlineKeyboardMarkup()
        cancel = types.InlineKeyboardButton(text="üôÖ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="–û—Ç–º–µ–Ω–∞")
        board.add(cancel)
        chat_id = message.chat.id
        for_whom = message.text
        user = user_dict[chat_id]
        user.for_whom = for_whom
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üîÑ–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥')
        markup.add(btn1)
        msg = bot.send_message(chat_id, '–ü–æ–¥ –∫–∞–∫–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∏–∑–¥–µ–ª–∏–µ?', reply_markup=markup)
        bot.register_next_step_handler(msg, process_kontact)
    except Exception as e:
        bot.reply_to(message, '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')


def process_kontact(message):
    try:
        board = types.InlineKeyboardMarkup()
        cancel = types.InlineKeyboardButton(text="üôÖ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="–û—Ç–º–µ–Ω–∞")
        board.add(cancel)
        chat_id = message.chat.id
        holiday = message.text
        user = user_dict[chat_id]
        user.holiday = holiday
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üîÑ–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥')
        markup.add(btn1)
        msg = bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏', reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, process_dop_kom)
    except Exception as e:
        bot.reply_to(message, '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')


def process_dop_kom(message):
    try:
        board = types.InlineKeyboardMarkup()
        cancel = types.InlineKeyboardButton(text="üôÖ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="–û—Ç–º–µ–Ω–∞")
        board.add(cancel)
        chat_id = message.chat.id
        kontakt_numb = message.text
        user = user_dict[chat_id]
        user.kontakt_numb = kontakt_numb
        if not kontakt_numb.isdigit() or len(kontakt_numb) != 11:
            msg = bot.send_message(chat_id, '–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 11 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.')
            bot.register_next_step_handler(msg, process_dop_kom)
            return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üîÑ–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥')
        markup.add(btn1)
        msg = bot.send_message(chat_id, '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∏–∑–¥–µ–ª–∏—é', reply_markup=markup)
        bot.register_next_step_handler(msg, send_z)
    except Exception as e:
        bot.reply_to(message, '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')


def send_z(message):
    chat_id = message.chat.id
    first_name = message.chat.first_name
    last_name = message.chat.last_name
    user_name = message.chat.username
    z = message.text  # text user
    app_text = []
    app_name_first = []
    app_name_last = []
    app_username = []
    app_name_first.append(first_name)
    app_name_last.append(last_name)
    app_username.append(user_name)
    app_text.append(z)
    user = user_dict[chat_id]
    user_chats = message.from_user.id
    bot.send_message(setting.admin_id_ugraswim,
                     f'–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∏–∑–¥–µ–ª–∏–µ –æ—Ç {app_name_first[0]} {app_name_last[0]} !\n'
                     + f'username –≤ —Ç–≥ = @{app_username[0]} \n'
                     + f'–ò–º—è  -  {user.name} \n'
                     + f'–¢–∏–ø  -  {user.type} \n'
                     + f'–î–ª—è –∫–æ–≥–æ  -  {user.for_whom} \n'
                     + f'–ü—Ä–∞–∑–¥–Ω–∏–∫  -  {user.holiday} \n'
                     + f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {user.kontakt_numb} \n'
                     + f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {app_text[0]} \n'

                     + f'ID —é–∑–µ—Ä–∞: {user_chats}')
    bot.send_message(setting.group_id_manager,
                     f'–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∏–∑–¥–µ–ª–∏–µ –æ—Ç {app_name_first[0]} {app_name_last[0]} !\n'
                     + f'username –≤ —Ç–≥ = @{app_username[0]} \n'
                     + f'–ò–º—è  -  {user.name} \n'
                     + f'–¢–∏–ø  -  {user.type} \n'
                     + f'–î–ª—è –∫–æ–≥–æ  -  {user.for_whom} \n'
                     + f'–ü—Ä–∞–∑–¥–Ω–∏–∫  -  {user.holiday} \n'
                     + f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {user.kontakt_numb} \n'
                     + f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {app_text[0]} \n'

                     + f'ID —é–∑–µ—Ä–∞: {user_chats}')
    app_name_first.clear()
    app_name_last.clear()
    app_username.clear()
    app_text.clear()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1)
    bot.send_message(chat_id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_button_click(call):
    chat_id = call.message.chat.id
    if call.message:
        if call.data == "–û—Ç–º–µ–Ω–∞":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            btn1 = types.KeyboardButton('üéÅ –ó–∞–∫–∞–∑–∞—Ç—å –∏–∑–¥–µ–ª–∏–µ')
            btn3 = types.KeyboardButton('üåü –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã')
            btn4 = types.KeyboardButton('‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã')
            btn5 = types.KeyboardButton('üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª')
            markup.add(btn1, btn3, btn4, btn5)
            msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text='–û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏...')
            bot.send_message(chat_id=call.message.chat.id, text='‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª', reply_markup=markup)
            bot.clear_step_handler(msg)


try:
    bot.infinity_polling(timeout=90, long_polling_timeout=5)
except (ConnectionError, ReadTimeout) as e:
    sys.stdout.flush()
    os.execv(sys.argv[0], sys.argv)
else:
    bot.infinity_polling(timeout=90, long_polling_timeout=5)
