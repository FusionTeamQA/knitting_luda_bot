import os
import sys
import time
from datetime import datetime

import gspread
import pytz
import telebot
from oauth2client.service_account import ServiceAccountCredentials
from requests import ReadTimeout
from telebot import types
from telebot.types import ReplyKeyboardRemove
import random


from products import products_bag
from products import products_games
from products import products_baskets

import setting

bot = telebot.TeleBot(setting.token_prod)
# –ó–∞–∫–∞–∑
user_dict = {}
user_chats = 0

generated_numbers = []

def generate_unique_random_number():
    global generated_numbers
    number = random.randint(0, 500)
    while number in generated_numbers:
        number = random.randint(0, 500)
    generated_numbers.append(number)
    return number
class User:

    def __init__(self, name):
        self.name = None
        self.type = None
        self.for_whom = None
        self.holiday = None
        self.kontakt_numb = None
        self.git_acc1 = None

        keys = ['name', 'type', 'for_whom', 'holiday', 'kontakt_numb', 'git_acc1']

        for key in keys:
            self.key = None


# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
products_bag = products_bag
current_index = 0  # –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏


dt_string = None  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ Google API
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
credentials = ServiceAccountCredentials.from_json_keyfile_name('key/key.json', scope)
client = gspread.authorize(credentials)

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ URL
url = 'https://docs.google.com/spreadsheets/d/1tPyAv6qoarR_bRTPt61ZeMoKI9VNDMV8hyN1EDN6wlc/edit#gid=274948492'
sheet = client.open_by_url(url).sheet1

url_log = 'https://docs.google.com/spreadsheets/d/1tPyAv6qoarR_bRTPt61ZeMoKI9VNDMV8hyN1EDN6wlc/edit#gid=97989579'
sheet_log = client.open_by_url(url_log).worksheet('Log')

url_orders = 'https://docs.google.com/spreadsheets/d/1tPyAv6qoarR_bRTPt61ZeMoKI9VNDMV8hyN1EDN6wlc/edit#gid=1272584257'
sheet_orders = client.open_by_url(url_log).worksheet('Orders')

url_lottery = 'https://docs.google.com/spreadsheets/d/1tPyAv6qoarR_bRTPt61ZeMoKI9VNDMV8hyN1EDN6wlc/edit#gid=1699828975'
sheet_lottery = client.open_by_url(url_log).worksheet('Lottery')


data = sheet.get_all_records()

@bot.message_handler(commands=['start'])
def start(message):
    try:
        target_timezone = pytz.timezone('Europe/Moscow')
        now = datetime.now(tz=target_timezone)
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
        data_to_insert = [message.text, message.from_user.username, dt_string]
        sheet.append_row(data_to_insert)
        sheet_log.append_row(data_to_insert)
        user_id = message.from_user.id
        channel_id = -1002077580466  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
        chat_member = bot.get_chat_member(channel_id, user_id)
        if chat_member.status in ['member', 'administrator', 'creator']:
            bot.send_message(message.from_user.id,
                             "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É –ø–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –≤—è–∑–∞–Ω–Ω—ã—Ö –∏–≥—Ä—É—à–µ–∫ –∏ –∫–æ—Ä–∑–∏–Ω–æ–∫! "
                             "–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –ª—é–±—É—é –≤—è–∑–∞–Ω–Ω—É—é –≤–µ—â—å –ø–æ –≤–∞—à–µ–º—É –∂–µ–ª–∞–Ω–∏—é.")
            bot.send_message(message.from_user.id,
                             "üí´ –ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –∏ –º—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –¥–ª—è –≤–∞—Å.")
            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            btn1 = types.KeyboardButton('üéÅ –ó–∞–∫–∞–∑–∞—Ç—å –∏–∑–¥–µ–ª–∏–µ')
            btn2 = types.KeyboardButton('üéâ –†–æ–∑—ã–≥—Ä—ã—à')
            btn3 = types.KeyboardButton('üåü –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã')
            btn4 = types.KeyboardButton('‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã')
            btn7 = types.KeyboardButton('‚ú® –ê–∫—Ü–∏–∏')
            btn5 = types.KeyboardButton('üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª')
            btn6 = types.KeyboardButton('üëå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Ö–æ–¥—É')
            markup.add(btn1, btn2, btn3, btn4, btn7, btn5, btn6)
            bot.send_message(message.from_user.id,
                             "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏. –ù–∞–¥–µ–µ–º—Å—è, –≤—ã –Ω–∞–π–¥–µ—Ç–µ —É –Ω–∞—Å —Ç–æ, —á—Ç–æ –∏—â–µ—Ç–µ! üß∂üß∏üß∫",
                             reply_markup=markup)
        else:
            bot.send_message(user_id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ. https://t.me/MagicCrochet_61", parse_mode='html')
    except Exception as e:
        print(e)
        bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.")


@bot.message_handler(func=lambda message: message.text == 'üåü –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã')
def handle_works_command(message):
    target_timezone = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz=target_timezone)
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    data_to_insert = [message.text, message.from_user.username, dt_string]
    sheet_log.append_row(data_to_insert)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üß∫ –ö–æ—Ä–∑–∏–Ω—ã –∏ –Ω–∞–±–æ—Ä—ã')
    btn3 = types.KeyboardButton('üß∏ –ò–≥—Ä—É—à–∫–∏')
    btn4 = types.KeyboardButton('üëõ –°—É–º–∫–∏')
    btn5 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1, btn3, btn4, btn5)
    bot.send_message(message.from_user.id, '‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '‚ú® –ê–∫—Ü–∏–∏')
def handle_action_command(message):
    target_timezone = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz=target_timezone)
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    data_to_insert = [message.text, message.from_user.username, dt_string]
    sheet_log.append_row(data_to_insert)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üë´ –ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞')
    btn3 = types.KeyboardButton('‚ùáÔ∏è –°–∫–∏–¥–∫–∞ –Ω–∞ 2-–µ –∏–∑–¥–µ–ª–∏–µ')
    btn4 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1, btn3, btn4)
    bot.send_message(message.from_user.id, '‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üë´ –ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞')
def handle_action_friend(message):
    target_timezone = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz=target_timezone)
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    data_to_insert = [message.text, message.from_user.username, dt_string]
    sheet_log.append_row(data_to_insert)
    keyboard = telebot.types.InlineKeyboardMarkup()
    url_button = telebot.types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–∞–Ω–∞–ª–æ–º", url="https://t.me/MagicCrochet_61")
    keyboard.add(url_button)
    bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ 50% —Å–∫–∏–¥–∫—É –Ω–∞ —Å–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ –≤ —Å—Ç—É–¥–∏–∏ –≤—è–∑–∞–Ω–∏—è! –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç –ø–æ–∫—É–ø–∫—É, –∏ –æ–±–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ 50% —Å–∫–∏–¥–∫–∏ –Ω–∞ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã. '
                                           'üéâ –†–∞–¥—É–π—Ç–µ—Å—å –≤–º–µ—Å—Ç–µ, –¥–µ–ª–∏—Å—å —É—é—Ç–æ–º –∏ —Ä–∞–¥–æ—Å—Ç—å—é —Ä—É–∫–æ–¥–µ–ª–∏—è —Å –¥—Ä—É–∑—å—è–º–∏! üß∂‚ú®', reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == '‚ùáÔ∏è –°–∫–∏–¥–∫–∞ –Ω–∞ 2-–µ –∏–∑–¥–µ–ª–∏–µ')
def handle_action_discount(message):
    target_timezone = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz=target_timezone)
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    data_to_insert = [message.text, message.from_user.username, dt_string]
    sheet_log.append_row(data_to_insert)
    keyboard = telebot.types.InlineKeyboardMarkup()
    luda_button_tg = telebot.types.InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –¢–µ–ª–µ–≥—Ä–∞–º", url=setting.Luda)
    luda_button_vk = telebot.types.InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", url=setting.VK)
    keyboard.add(luda_button_tg, luda_button_vk)
    bot.send_message(message.from_user.id, '–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –¥–≤—É—Ö –∏–∑–¥–µ–ª–∏–π –≤ —Å—Ç—É–¥–∏–∏ –≤—è–∑–∞–Ω–∏—è, –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É –Ω–∞ –≤—Ç–æ—Ä–æ–µ –∏–∑–¥–µ–ª–∏–µ 30%! –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è —É—é—Ç–æ–º –∏ –∫—Ä–∞—Å–æ—Ç–æ–π –≤–¥–≤–æ–π–Ω–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤—è–∑–∞–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏. '
                                           'üéÅüß∂‚ú® –£–¥–∏–≤–∏ —Å–µ–±—è –∏ —Å–≤–æ–∏—Ö –±–ª–∏–∑–∫–∏—Ö –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞–º–∏ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã!' , reply_markup=keyboard)



@bot.message_handler(func=lambda message: message.text == 'üéâ –†–æ–∑—ã–≥—Ä—ã—à')

def handle_raffle_command(message):
    target_timezone = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz=target_timezone)
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    data_to_insert = [message.text, message.from_user.username, dt_string]
    sheet_log.append_row(data_to_insert)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('ü•á –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à')
    btn2 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id, 'üîç–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "ü•á –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à" –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¢–µ–ª–µ–≥—Ä–∞–º.')
    bot.send_message(message.from_user.id, '‚¨á –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=markup)

last_raffle_time = {}

@bot.message_handler(func=lambda message: message.text == 'ü•á –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à')
def handle_raffle(message):
    target_timezone = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz=target_timezone)
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    user_id = message.from_user.id
    current_time = time.time()
    if user_id in last_raffle_time:
        time_since_last_raffle = current_time - last_raffle_time[user_id]
        if time_since_last_raffle < 24*60*60:  # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤
            bot.send_message(user_id, "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞. –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä–æ–∫ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞")
            return
    last_raffle_time[user_id] = current_time
    random_number = generate_unique_random_number()
    bot.send_message(user_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä: {random_number}")
    data_to_insert = [message.from_user.username, message.from_user.first_name, message.from_user.last_name, random_number, dt_string]
    sheet_lottery.append_row(data_to_insert)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –°—É–º–æ–∫
@bot.message_handler(func=lambda message: message.text == 'üëõ –°—É–º–∫–∏')
def handle_bags_command(message):
    target_timezone = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz=target_timezone)
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    data_to_insert = [message.text, message.from_user.username, dt_string]
    sheet_log.append_row(data_to_insert)
    global current_index
    current_index = 0  # –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    send_batch(message)


def send_batch(message):
    global current_index
    batch_size = 2  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
    end_index = current_index + batch_size

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π "–ø–æ—Ä—Ü–∏–∏"
    for product in products_bag[current_index:end_index]:
        with open(product['image_path'], 'rb') as photo:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ
            bot.send_photo(message.chat.id, photo, caption=f"<b>{product['name']}</b>\n\n{product['description']}",
                           parse_mode="HTML")
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π "–ø–æ—Ä—Ü–∏–∏"
    current_index = end_index

    # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"
    if current_index < len(products_bag):
        markup = telebot.types.InlineKeyboardMarkup()
        load_more_button = telebot.types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë ü§©', callback_data='load_more')
        markup.add(load_more_button)
        remaining_products = len(products_bag) - current_index
        if remaining_products == 1:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç–∞, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)
        elif remaining_products < 5:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç—ã, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'load_more')
def handle_load_more(call):
    send_batch(call.message)
    bot.answer_callback_query(call.id)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ò–≥—Ä—É—à–µ–∫
@bot.message_handler(func=lambda message: message.text == 'üß∏ –ò–≥—Ä—É—à–∫–∏')
def handle_games_command(message):
    target_timezone = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz=target_timezone)
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    data_to_insert = [message.text, message.from_user.username, dt_string]
    sheet_log.append_row(data_to_insert)
    global current_index
    current_index = 0  # –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    send_batch_games(message)


def send_batch_games(message):
    global current_index
    batch_size = 2  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
    end_index = current_index + batch_size

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π "–ø–æ—Ä—Ü–∏–∏"
    for product in products_games[current_index:end_index]:
        with open(product['image_path'], 'rb') as photo:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ
            bot.send_photo(message.chat.id, photo, caption=f"<b>{product['name']}</b>\n\n{product['description']}",
                           parse_mode="HTML")
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π "–ø–æ—Ä—Ü–∏–∏"
    current_index = end_index

    # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"
    if current_index < len(products_games):
        markup = telebot.types.InlineKeyboardMarkup()
        load_more_button = telebot.types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë ü§©', callback_data='load_more_games')
        markup.add(load_more_button)
        remaining_products = len(products_games) - current_index
        if remaining_products == 1:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç–∞, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)
        elif remaining_products < 5:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç—ã, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'load_more_games')
def handle_load_more(call):
    send_batch_games(call.message)
    bot.answer_callback_query(call.id)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ö–æ—Ä–∑–∏–Ω–æ–∫
@bot.message_handler(func=lambda message: message.text == 'üß∫ –ö–æ—Ä–∑–∏–Ω—ã –∏ –Ω–∞–±–æ—Ä—ã')
def handle_basket_command(message):
    target_timezone = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz=target_timezone)
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    data_to_insert = [message.text, message.from_user.username, dt_string]
    sheet_log.append_row(data_to_insert)
    bot.send_message(message.from_user.id,
                     '–°—Ç–∏–ª—å–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω–∫–∏ —Å–¥–µ–ª–∞—é—Ç –í–∞—à –¥–æ–º —É—é—Ç–Ω—ã–º –∏ –º–æ–¥–Ω—ã–º. –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞.\n')
    global current_index
    current_index = 0  # –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    send_batch_basket(message)


def send_batch_basket(message):
    global current_index
    batch_size = 2  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
    end_index = current_index + batch_size

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π "–ø–æ—Ä—Ü–∏–∏"
    for product in products_baskets[current_index:end_index]:
        with open(product['image_path'], 'rb') as photo:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ
            bot.send_photo(message.chat.id, photo, caption=f"<b>{product['name']}</b>\n\n{product['description']}",
                           parse_mode="HTML")
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π "–ø–æ—Ä—Ü–∏–∏"
    current_index = end_index

    # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"
    if current_index < len(products_baskets):
        markup = telebot.types.InlineKeyboardMarkup()
        load_more_button = telebot.types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë ü§©', callback_data='load_more_basket')
        markup.add(load_more_button)
        remaining_products = len(products_baskets) - current_index
        if remaining_products == 1:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç–∞, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)
        elif remaining_products < 5:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç—ã, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã –µ—â–µ ' + str(remaining_products) + ' —Ä–∞–±–æ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å? üôà',
                             reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'load_more_basket')
def handle_load_more(call):
    send_batch_basket(call.message)
    bot.answer_callback_query(call.id)


@bot.message_handler(func=lambda message: message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def handle_menu_command(message):
    target_timezone = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz=target_timezone)
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    data_to_insert = [message.text, message.from_user.username, dt_string]
    sheet_log.append_row(data_to_insert)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üéÅ –ó–∞–∫–∞–∑–∞—Ç—å –∏–∑–¥–µ–ª–∏–µ')
    btn2 = types.KeyboardButton('üéâ –†–æ–∑—ã–≥—Ä—ã—à')
    btn3 = types.KeyboardButton('üåü –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã')
    btn4 = types.KeyboardButton('‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã')
    btn7 = types.KeyboardButton('‚ú® –ê–∫—Ü–∏–∏')
    btn5 = types.KeyboardButton('üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª')
    btn6 = types.KeyboardButton('üëå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Ö–æ–¥—É')
    markup.add(btn1, btn2, btn3, btn4, btn7, btn5, btn6)
    bot.send_message(message.from_user.id, '‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã')
def handle_contacts_command(message):
    target_timezone = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz=target_timezone)
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    data_to_insert = [message.text, message.from_user.username, dt_string]
    sheet_log.append_row(data_to_insert)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1)
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –≤ Telegram", url="https://t.me/@Lyudo4ek_1986")
    keyboard.add(button)
    bot.send_message(message.from_user.id, '–ù–∞–ø–∏—Å–∞—Ç—å –í–∫–æ–Ω—Ç–∞–∫—Ç–µ: \n' + setting.VK, disable_web_page_preview=True,
                     reply_markup=markup)
    bot.send_contact(message.from_user.id, '+79888904608', '–õ—é–¥–º–∏–ª–∞', '–ë–∞–π–≥—É–∑–∏–Ω–∞', reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == 'üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª')
def handle_subscribe_command(message):
    target_timezone = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz=target_timezone)
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    data_to_insert = [message.text, message.from_user.username, dt_string]
    sheet_log.append_row(data_to_insert)
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/MagicCrochet_61")
    keyboard.add(button)
    bot.send_message(chat_id=message.chat.id, text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:",
                     reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == 'üëå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Ö–æ–¥—É')
def handle_instruction_command(message):
    target_timezone = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz=target_timezone)
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    data_to_insert = [message.text, message.from_user.username, dt_string]
    sheet_log.append_row(data_to_insert)
    with open('instruction.txt', 'r') as file:
        instr_text = file.read()
    bot.send_message(chat_id=message.chat.id, text=instr_text)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üéÅ –ó–∞–∫–∞–∑–∞—Ç—å –∏–∑–¥–µ–ª–∏–µ')
    btn5 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1, btn5)
    bot.send_message(chat_id=message.chat.id, text="–ó–∞–∫–∞–∂–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É–∂–µ —Å–µ–∏ÃÜ—á–∞—Å! ü§©üíÉ", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üéÅ –ó–∞–∫–∞–∑–∞—Ç—å –∏–∑–¥–µ–ª–∏–µ')
def handle_order_command(message):
    target_timezone = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz=target_timezone)
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    data_to_insert = [message.text, message.from_user.username, dt_string]
    sheet_log.append_row(data_to_insert)
    chat_id = message.chat.id
    board = types.InlineKeyboardMarkup()
    cancel = types.InlineKeyboardButton(text="üôÖ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="–û—Ç–º–µ–Ω–∞")
    board.add(cancel)
    msg = bot.send_message(chat_id, "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", reply_markup=board)
    bot.register_next_step_handler(msg, name_step)


def name_step(message, user=None):
    try:
        board = types.InlineKeyboardMarkup()
        cancel = types.InlineKeyboardButton(text="üôÖ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="–û—Ç–º–µ–Ω–∞")
        board.add(cancel)
        chat_id = message.chat.id
        name = message.text
        user = User(name)
        user_dict[chat_id] = user
        user.name = name
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üß∫ –ö–æ—Ä–∑–∏–Ω—ã –∏ –Ω–∞–±–æ—Ä—ã')
        btn3 = types.KeyboardButton('üß∏ –ò–≥—Ä—É—à–∫–∏')
        btn4 = types.KeyboardButton('üëõ –°—É–º–∫–∏')
        markup.add(btn1, btn3, btn4)
        msg = bot.send_message(chat_id, "–ö–∞–∫–æ–π –≤–∏–¥ –∏–∑–¥–µ–ª–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_type)
    except Exception as e:
        bot.reply_to(message, '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
    # keys = ['name', 'type', 'for_whom', 'holiday', 'kontakt_numb', 'git_acc1']


def process_type(message):
    try:
        board = types.InlineKeyboardMarkup()
        cancel = types.InlineKeyboardButton(text="üôÖ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="–û—Ç–º–µ–Ω–∞")
        board.add(cancel)
        chat_id = message.chat.id
        type = message.text
        user = user_dict[chat_id]
        user.type = type
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üîÑ–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥')
        markup.add(btn1)
        msg = bot.send_message(chat_id, '–î–ª—è –∫–æ–≥–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–∑–¥–µ–ª–∏–µ?', reply_markup=markup)
        bot.register_next_step_handler(msg, process_for_whom)
    except Exception as e:
        bot.reply_to(message, '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')


def process_for_whom(message):
    try:
        board = types.InlineKeyboardMarkup()
        cancel = types.InlineKeyboardButton(text="üôÖ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="–û—Ç–º–µ–Ω–∞")
        board.add(cancel)
        chat_id = message.chat.id
        for_whom = message.text
        user = user_dict[chat_id]
        user.for_whom = for_whom
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üîÑ–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥')
        markup.add(btn1)
        msg = bot.send_message(chat_id, '–ü–æ–¥ –∫–∞–∫–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∏–∑–¥–µ–ª–∏–µ?', reply_markup=markup)
        bot.register_next_step_handler(msg, process_kontact)
    except Exception as e:
        bot.reply_to(message, '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')


def process_kontact(message):
    try:
        board = types.InlineKeyboardMarkup()
        cancel = types.InlineKeyboardButton(text="üôÖ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="–û—Ç–º–µ–Ω–∞")
        board.add(cancel)
        chat_id = message.chat.id
        holiday = message.text
        user = user_dict[chat_id]
        user.holiday = holiday
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üîÑ–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥')
        markup.add(btn1)
        msg = bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏', reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, process_dop_kom)
    except Exception as e:
        bot.reply_to(message, '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')


def process_dop_kom(message):
    try:
        board = types.InlineKeyboardMarkup()
        cancel = types.InlineKeyboardButton(text="üôÖ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="–û—Ç–º–µ–Ω–∞")
        board.add(cancel)
        chat_id = message.chat.id
        kontakt_numb = message.text
        user = user_dict[chat_id]
        user.kontakt_numb = kontakt_numb
        if not kontakt_numb.isdigit() or len(kontakt_numb) != 11:
            msg = bot.send_message(chat_id, '–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 11 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.')
            bot.register_next_step_handler(msg, process_dop_kom)
            return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üîÑ–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥')
        markup.add(btn1)
        msg = bot.send_message(chat_id, '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∏–∑–¥–µ–ª–∏—é', reply_markup=markup)
        bot.register_next_step_handler(msg, send_z)
    except Exception as e:
        bot.reply_to(message, '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')


def send_z(message):
    chat_id = message.chat.id
    first_name = message.chat.first_name
    last_name = message.chat.last_name
    user_name = message.chat.username
    z = message.text  # text user
    app_text = []
    app_name_first = []
    app_name_last = []
    app_username = []
    app_name_first.append(first_name)
    app_name_last.append(last_name)
    app_username.append(user_name)
    app_text.append(z)
    user = user_dict[chat_id]
    user_chats = message.from_user.id
    bot.send_message(setting.admin_id_ugraswim,
                     f'–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∏–∑–¥–µ–ª–∏–µ –æ—Ç {app_name_first[0]} {app_name_last[0]} !\n'
                     + f'username –≤ —Ç–≥ = @{app_username[0]} \n'
                     + f'–ò–º—è  -  {user.name} \n'
                     + f'–¢–∏–ø  -  {user.type} \n'
                     + f'–î–ª—è –∫–æ–≥–æ  -  {user.for_whom} \n'
                     + f'–ü—Ä–∞–∑–¥–Ω–∏–∫  -  {user.holiday} \n'
                     + f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {user.kontakt_numb} \n'
                     + f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {app_text[0]} \n'

                     + f'ID —é–∑–µ—Ä–∞: {user_chats}')
    bot.send_message(setting.group_id_manager,
                     f'–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∏–∑–¥–µ–ª–∏–µ –æ—Ç {app_name_first[0]} {app_name_last[0]} !\n'
                     + f'username –≤ —Ç–≥ = @{app_username[0]} \n'
                     + f'–ò–º—è  -  {user.name} \n'
                     + f'–¢–∏–ø  -  {user.type} \n'
                     + f'–î–ª—è –∫–æ–≥–æ  -  {user.for_whom} \n'
                     + f'–ü—Ä–∞–∑–¥–Ω–∏–∫  -  {user.holiday} \n'
                     + f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {user.kontakt_numb} \n'
                     + f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {app_text[0]} \n'

                     + f'ID —é–∑–µ—Ä–∞: {user_chats}')
    target_timezone = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz=target_timezone)
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    data_to_insert_orders = [user.name, user.type, user.for_whom, user.holiday, user.kontakt_numb, app_text[0], message.from_user.username, dt_string]
    sheet_orders.append_row(data_to_insert_orders)
    app_name_first.clear()
    app_name_last.clear()
    app_username.clear()
    app_text.clear()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1)
    bot.send_message(chat_id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_button_click(call):
    chat_id = call.message.chat.id
    if call.message:
        if call.data == "–û—Ç–º–µ–Ω–∞":
            target_timezone = pytz.timezone('Europe/Moscow')
            now = datetime.now(tz=target_timezone)
            dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
            data_to_insert = ['–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏', call.message.chat.username, dt_string]
            sheet_log.append_row(data_to_insert)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            btn1 = types.KeyboardButton('üéÅ –ó–∞–∫–∞–∑–∞—Ç—å –∏–∑–¥–µ–ª–∏–µ')
            btn3 = types.KeyboardButton('üåü –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã')
            btn4 = types.KeyboardButton('‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã')
            btn5 = types.KeyboardButton('üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª')
            btn6 = types.KeyboardButton('üëå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Ö–æ–¥—É')
            markup.add(btn1, btn3, btn4, btn5, btn6)
            msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text='–û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏...')
            bot.send_message(chat_id=call.message.chat.id, text='‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª', reply_markup=markup)
            bot.clear_step_handler(msg)


try:
    bot.infinity_polling(timeout=90, long_polling_timeout=5)
except (ConnectionError, ReadTimeout) as e:
    sys.stdout.flush()
    os.execv(sys.argv[0], sys.argv)
else:
    bot.infinity_polling(timeout=90, long_polling_timeout=5)
